{"version":3,"sources":["components/Filter/Filter.styled.jsx","redux/contacts/contacts-actions.js","components/Filter/Filter.jsx","components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","App.js","redux/contacts/contacts-reduser.js","redux/store.js","index.js"],"names":["FilterInput","styled","label","addContact","createAction","removeContact","filterAct","Filter","filter","useSelector","state","contacts","dispatch","useDispatch","type","name","value","onChange","e","target","pattern","title","ButtonStyled","button","Contact","id","number","deleteContact","onClick","ListStyled","ul","ContactList","toast","success","contact","toLowerCase","includes","map","FormStyled","form","ContactForm","useState","setName","setNumber","handleChange","addNewContact","newContact","some","error","onSubmit","preventDefault","nanoid","required","App","useEffect","localStorage","setItem","JSON","stringify","length","localContacts","getItem","parseContacts","parse","createReducer","payload","_","combineReducers","store","configureStore","reducer","contactsReduser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d28622d7.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const FilterInput = styled.label`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 250px;\r\n`;\r\n","import { createAction } from \"@reduxjs/toolkit\"\r\n\r\nexport const addContact = createAction('contacts/add');\r\nexport const removeContact = createAction('contacts/delete');\r\nexport const filterAct = createAction('contacts/filter');","import { FilterInput } from './Filter.styled';\r\nimport {  useDispatch, useSelector } from 'react-redux'\r\nimport {filterAct} from '../../redux/contacts/contacts-actions.js'\r\n\r\nexport default function Filter() {\r\n  const {filter} = useSelector(state=>state.contacts)\r\n  const dispatch=useDispatch();\r\n  \r\n  const handleChangeFilter = e => {\r\n    const value = e.target.value;\r\n    dispatch(filterAct(value));\r\n  };\r\n  return (\r\n    <>\r\n      <FilterInput>\r\n        Find contacts by name\r\n        <input\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          value={filter}\r\n          onChange={handleChangeFilter}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n        />\r\n      </FilterInput>\r\n    </>\r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ButtonStyled = styled.button`\r\n  margin-left: 25px;\r\n  :hover,\r\n  :focus {\r\n    background-color: blue;\r\n    color: white;\r\n  }\r\n`;\r\n","import { ButtonStyled } from './Contact.styled';\r\n\r\nexport default function Contact({ id, name, number, deleteContact }) {\r\n  return (\r\n    <>\r\n      <span>\r\n        {name} : {number}\r\n      </span>\r\n      <ButtonStyled type=\"button\" onClick={() => deleteContact(id)}>\r\n        Delete\r\n      </ButtonStyled>\r\n    </>\r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ListStyled = styled.ul`\r\n  & li {\r\n    margin-top: 7px;\r\n  }\r\n`;\r\n","import Contact from '../Contact/Contact';\r\nimport { ListStyled } from './ContactList.styled';\r\nimport {  useDispatch, useSelector } from 'react-redux'\r\nimport {removeContact} from '../../redux/contacts/contacts-actions'\r\nimport toast from 'react-hot-toast';\r\n\r\nexport default function ContactList() {\r\n  const {contacts, filter} = useSelector(state=>state.contacts)\r\n  const dispatch = useDispatch();\r\n  \r\n  const deleteContact =(id)=>{\r\n    dispatch(removeContact(id))\r\n    toast.success('delete is complete');\r\n  }\r\n  return (\r\n    <>\r\n      <section>\r\n        <ListStyled>\r\n          {contacts\r\n            .filter(contact =>\r\n              contact.name.toLowerCase().includes(filter.toLowerCase())\r\n            )\r\n            .map(({ id, name, number }) => (\r\n              <li key={id}>\r\n                <Contact\r\n                  id={id}\r\n                  name={name}\r\n                  number={number}\r\n                  deleteContact={deleteContact}\r\n                />\r\n              </li>\r\n            ))}\r\n        </ListStyled>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const FormStyled = styled.form`\r\n  /* display: flex;\r\n  flex-direction: column; */\r\n  padding: 20px;\r\n  width: 300px;\r\n  border: 1px solid black;\r\n\r\n  & label {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: 20px;\r\n  }\r\n  & button {\r\n    margin-top: 20px;\r\n    :hover,\r\n    :focus {\r\n      background-color: blue;\r\n      color: white;\r\n    }\r\n  }\r\n`;\r\n","import { useState } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { FormStyled } from './ContactForm.styled';\r\nimport toast from 'react-hot-toast';\r\nimport {  useDispatch, useSelector } from 'react-redux'\r\nimport {addContact} from '../../redux/contacts/contacts-actions'\r\n\r\nexport default function ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const contacts = useSelector(state=>state.contacts.contacts)\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const submitForm = e => {\r\n    e.preventDefault();\r\n    const newContact = {\r\n      id: nanoid(),\r\n      name,\r\n      number,\r\n    };\r\n    addNewContact(newContact);\r\n    setNumber('');\r\n    setName('');\r\n  };\r\n\r\n  const addNewContact = newContact => {\r\n    if (\r\n      contacts.some(\r\n        contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\r\n      )\r\n    ) {\r\n      toast.error('contact with such name already exists');\r\n      return;\r\n    }\r\n    dispatch(addContact(newContact));\r\n    toast.success('contact added');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormStyled onSubmit={submitForm}>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            onChange={handleChange}\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n            required\r\n          />\r\n        </label>\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            onChange={handleChange}\r\n            value={number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Add contact</button>\r\n      </FormStyled>\r\n    </>\r\n  );\r\n}\r\n","import {  useEffect } from 'react';\r\nimport {  useSelector } from 'react-redux'\r\nimport { Toaster } from 'react-hot-toast';\r\nimport Filter from './components/Filter/Filter';\r\nimport ContactList from './components/ContactList/ContactList';\r\nimport ContactForm from './components/ContactForm/ContactForm';\r\n\r\nfunction App() {\r\n  const contacts = useSelector(state=>state.contacts.contacts)\r\n  \r\n  useEffect(() => {\r\n    localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  }, [contacts]);\r\n  \r\n  return (\r\n    <>\r\n      <Toaster />\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      {contacts.length>0 && <ContactList/>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {createReducer, combineReducers } from \"@reduxjs/toolkit\";\r\nimport {addContact, removeContact, filterAct} from './contacts-actions'\r\n\r\nconst localContacts=localStorage.getItem('contacts');\r\nconst parseContacts = JSON.parse(localContacts)\r\n\r\nconst contacts = createReducer(parseContacts?? [],{\r\n    [addContact]:(state, {payload})=>[payload, ...state],         \r\n    [removeContact]:(state, {payload})=>state.filter(({id})=>id!==payload)\r\n});\r\n\r\nconst filter = createReducer('',{\r\n    [filterAct]:(_, {payload})=>payload\r\n});\r\n\r\nexport default combineReducers({\r\n    contacts,\r\n    filter\r\n});","import { configureStore } from '@reduxjs/toolkit'\r\nimport contactsReduser from './contacts/contacts-reduser'\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReduser,\r\n},\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(  \n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n  </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}